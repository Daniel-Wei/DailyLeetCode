# 528. Random Pick with Weight

# You are given an array of positive integers w where w[i] describes the weight of ith index (0-indexed).
# We need to call the function pickIndex() which randomly returns an integer in the range [0, w.length - 1]. pickIndex() 
  should return the integer proportional to its weight in the w array. 
# For example, for w = [1, 3], the probability of picking the index 0 is 1 / (1 + 3) = 0.25 (i.e 25%) 
  while the probability of picking the index 1 is 3 / (1 + 3) = 0.75 (i.e 75%).
# More formally, the probability of picking index i is w[i] / sum(w).


### Overview ### 
# This is actually a very practical problem which appears often in the scenario where we need to do sampling over a set of data.

# Nowadays, people talk a lot about machine learning algorithms.
  As many would reckon, one of the basic operations involved in training a machine learning algorithm 
  (e.g. Decision Tree) is to sample a batch of data and feed them into the model, rather than taking the entire data set. 

# Now, given the above background, hopefully one is convinced that this is an interesting problem, and it is definitely worth solving.

## Intuition ## 
# Given a list of positive values, we are asked to randomly pick up a value based on the weight of each value. 
  To put it simple, the task is to do sampling with weight.

# Let us look at a simple example. Given an input list of values [1, 9], when we pick up a number out of it, 
  the chance is that 9 times out of 10 we should pick the number 9 as the answer.

# In other words, the probability that a number got picked is proportional to the value of the number, 
  with regards to the total sum of all numbers.

# To understand the problem better, let us imagine that there is a line in the space, 
  we then project each number into the line according to its value, i.e. a large number would occupy a broader range on the line compared to a small number. 
  For example, the range for the number 9 should be exactly nine times as the range for the number 1.

## throw a ball ## 
# Now, let us throw a ball randomly onto the line, then it is safe to say there is a good chance that the ball will fall into the range occupied by the number 9. 
  In fact, if we repeat this experiment for a large number of times, then statistically speaking, 9 out of 10 times the ball will fall into the range for the number 9.

Voila. That is the intuition behind this problem.

## Simulation ##
# So to solve the problem, we can simply simulate the aforementioned experiment with a computer program.

# First of all, let us construct the line in the experiment by chaining up all values together.

# As many of you might recognize now, the offsets of the ranges are actually the prefix sums from a sequence of numbers.
  For each number in a sequence, its corresponding prefix sum, also known as cumulative sum, is the sum of all previous numbers in the sequence plus the number itself.
  
# As an observation from the definition of prefix sums, one can see that the list of prefix sums would be strictly monotonically increasing, 
  if all numbers are positive.

# To throw a ball on the line is to find an offset to place the ball. Let us call this offset target.

# Once we randomly generate the target offset, the task is now boiled down to finding the range that this target falls into.

# Let us rephrase the problem now, given a list of offsets (i.e. prefix sums) and a target offset, 
  our task is to fit the target offset into the list so that the ascending order is maintained.
  
 
class Solution:
    def __init__(self, w: List[int]):
        """
        :type w: List[int]
        """
        self.prefix_sums = []
        prefix_sum = 0
        for weight in w:
            prefix_sum += weight
            self.prefix_sums.append(prefix_sum)
        self.total_sum = prefix_sum

    def pickIndex(self) -> int:
        """
        :rtype: int
        """
        target = self.total_sum * random.random()
        # run a binary search to find the target zone
        low, high = 0, len(self.prefix_sums)
        while low < high:
            mid = low + (high - low) // 2
            if target > self.prefix_sums[mid]:
                low = mid + 1
            else:
                high = mid
        return low
