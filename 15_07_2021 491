# 491 Increasing Subsequences

*** Given an integer array nums, return all the different possible increasing subsequences of the given array with at least two elements. 
    You may return the answer in any order.

*** The given array may contain duplicates, and two equal integers should also be considered a special case of increasing sequence.

# Example 1:

*** Input: nums = [4,6,7,7]
*** Output: [[4,6],[4,6,7],[4,6,7,7],[4,7],[4,7,7],[6,7],[6,7,7],[7,7]]


# BackTrack: DFS + Record Curr Status ### 
class Solution:
    def findSubsequences(self, nums: List[int]) -> List[List[int]]:
        ans = set()
        def backTrack(start, curr):
            if len(curr) > 1:
                ans.add(tuple(curr))
            
            last = curr[-1] if curr else -200
        
            for i in range(start, n):
                if nums[i] >= last:
                    curr.append(nums[i])
                    backTrack(i+1, curr)
                    curr.pop()
                
        n = len(nums)
        backTrack(0, [])
        return ans
