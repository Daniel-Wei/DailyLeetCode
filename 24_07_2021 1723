# 1723. Find Minimum Time to Finish All Jobs

*** You are given an integer array jobs, where jobs[i] is the amount of time it takes to complete the ith job.

*** There are k workers that you can assign jobs to. Each job should be assigned to exactly one worker. 
    The working time of a worker is the sum of the time it takes to complete all jobs assigned to them. 
    Your goal is to devise an optimal assignment such that the maximum working time of any worker is minimized.

*** Return the minimum possible maximum working time of any assignment.


# Example:
** Input: jobs = [1,2,4,7,8], k = 2
** Output: 11
** Explanation: Assign the jobs the following way:
   Worker 1: 1, 2, 8 (working time = 1 + 2 + 8 = 11)
   Worker 2: 4, 7 (working time = 4 + 7 = 11)
   The maximum working time is 11.



*** My First Version: General Greedy --- Not Work ***
# import operator
# class Solution:
#     def minimumTimeRequired(self, jobs: List[int], k: int) -> int:
#         memo = [0  for i in range(k)]
#         jobs = sorted(jobs, reverse= True)
#         for ele in jobs:
#             min_index, min_value = min(enumerate(memo), key=operator.itemgetter(1))
#             memo[min_index] += ele
            
#         return max(memo)
    



*** My Brute Force BackTrack Solution: TLE ***
# class Solution:
#     def minimumTimeRequired(self, jobs: List[int], k: int) -> int:
#         memo = [0  for i in range(k)]
#         res = []
        
#         def backtrack(jobs, index, memo, res):
#             if index == len(jobs):
#                 res += [max(memo)]
#                 return None
#             for i in range(k):
#                 temp = memo[i]
#                 memo[i] += jobs[index]
#                 backtrack(jobs, index + 1, memo, res)
#                 memo[i] = temp
                
#         backtrack(jobs, 0, memo, res)
#         return min(res)
    
    
    
    
*** BackTrack + Cutting Branches(All 'worker' identical + curMax >= ans, then no need to continue ***
class Solution:
    def minimumTimeRequired(self, jobs: List[int], k: int) -> int:
        if k >= len(jobs):
            return max(jobs)
        
        if k == 1:
            return sum(jobs)
        
        
        *** Simple Maths Cutting Branches Not Working ***
        # jobs = sorted(jobs, reverse = True) 
        # self.min_time = sum(jobs[: len(jobs)  - len(jobs)//k])
        # maxi = sum(jobs[: len(jobs)  - len(jobs)//k - 1])
#         if len(jobs) < 2*k:
#             for i in range(k):
#                 memo[i] += jobs[i]
#             jobs = jobs[k:]
            
#         self.min_time = max(memo) + sum(jobs)
        # rest = sum(jobs[ : len(jobs) - len(jobs) // k])
        
       
        def backtrack(index, curMax):
            nonlocal ans
            
            if curMax >= ans:
                return ans
            
            if index == len(jobs):
                ans = max(memo)
                return None
            
            timeSet = set()
            for i in range(k):
                if memo[i] not in timeSet:
                    memo[i] += jobs[index]
                    backtrack(index + 1, max(memo))
                    memo[i] -= jobs[index]
                    
                    timeSet.add(memo[i])
             
        memo = [0  for i in range(k)]
        ans = sum(jobs)
        backtrack(0, 0)
        return ans
