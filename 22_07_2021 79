# 79. Word Search

*** Given an m x n grid of characters board and a string word, 
    return true if word exists in the grid.

*** The word can be constructed from letters of sequentially adjacent cells, 
    where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.
    

# Example: 

** Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCCED"
** Output: true


*** My Own Solution: BackTracking + dict() as Trie
class Solution:
    def exist(self, board: List[List[str]], word: str) -> bool:
        WORD_KEY = '$'
        
        trie = {}
        node = trie
        for letter in word:
            node = node.setdefault(letter, {})
       
        node[WORD_KEY] = word
        
        rowNum = len(board)
        colNum = len(board[0])
        
        def backtrack(row, col, parent, board):
            currNode = parent[board[row][col]]
            if currNode.pop(WORD_KEY, False):
                return True
            
            temp = board[row][col]
            
            #避免回头路
            board[row][col]= '#'
            
            for (rowOffset, colOffset) in [(-1, 0), (0, 1), (1, 0), (0, -1)]:
                newRow, newCol = row + rowOffset, col + colOffset     
                if newRow < 0 or newRow >= rowNum or newCol < 0 or newCol >= colNum:
                    continue
                if not board[newRow][newCol] in currNode:
                    continue
                if backtrack(newRow, newCol, currNode, board):
                    return True
            
            #避免因为不走回头路而影响了其他的可能性
            board[row][col]= temp
            return False
        
        for row in range(len(board)):
            for col in range(len(board[0])):
                if board[row][col] == word[0]:
                    if backtrack(row, col, trie, board):
                        return True
        
        return False
        
