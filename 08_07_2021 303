# 303. Range Sum Query - Immutable

# Input
  ["NumArray", "sumRange", "sumRange", "sumRange"]
  [[[-2, 0, 3, -5, 2, -1]], [0, 2], [2, 5], [0, 5]]
# Output
  [null, 1, -1, -3]

# Explanation
  NumArray numArray = new NumArray([-2, 0, 3, -5, 2, -1]);
  numArray.sumRange(0, 2); // return (-2) + 0 + 3 = 1
  numArray.sumRange(2, 5); // return 3 + (-5) + 2 + (-1) = -1
  numArray.sumRange(0, 5); // return (-2) + 0 + 3 + (-5) + 2 + (-1) = -3

### Version 1: Brute Force ###
# Problem: the actual sumRange() function in  O(n)

class NumArray:

    def __init__(self, nums: List[int]):
        self.nums = nums
        

    def sumRange(self, left: int, right: int) -> int:
        return sum(self.nums[left : right + 1])
        
        
### Version 2: DP ###
# Benefit: the actual sumRange() function in O(1)

class NumArray:

    def __init__(self, nums: List[int]):
        self.sums = [0, nums[0]]
        for i in range(1, len(nums)):
            self.sums += [self.sums[i] + nums[i]]
        

    def sumRange(self, left: int, right: int) -> int:
        return self.sums[right + 1] - self.sums[left]
