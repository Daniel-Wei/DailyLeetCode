# 25. Reverse Nodes in k-Group

# Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.

# k is a positive integer and is less than or equal to the length of the linked list. 
# If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.

# You may not alter the values in the list's nodes, only nodes themselves may be changed.


### My First Version: Using Stack() <deque()> ###

# Definition for singly-linked list.
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

from collections import deque

class Solution:
    def reverseKGroup(self, head: ListNode, k: int) -> ListNode:
        res = ListNode()
        curr = res
        counter = 0
        temp = deque()
        while head and counter <= k:
            temp.append(head.val)
            counter += 1
            head = head.next
            
            if counter == k:
                while len(temp):
                    curr.next = ListNode(temp.pop())
                    curr = curr.next
                    
                counter = 0
                
        while len(temp) > 0:
            curr.next = ListNode(temp.popleft())
            curr = curr.next
                
        return res.next
