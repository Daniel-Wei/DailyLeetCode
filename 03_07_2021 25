# 25. Reverse Nodes in k-Group

# Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.

# k is a positive integer and is less than or equal to the length of the linked list. 
# If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.

# You may not alter the values in the list's nodes, only nodes themselves may be changed.


### My First Version: Using Stack() <deque()> ###

# Definition for singly-linked list.
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

from collections import deque

class Solution:
    def reverseKGroup(self, head: ListNode, k: int) -> ListNode:
        res = ListNode()
        curr = res
        counter = 0
        temp = deque()
        while head and counter <= k:
            temp.append(head.val)
            counter += 1
            head = head.next
            
            if counter == k:
                while len(temp):
                    curr.next = ListNode(temp.pop())
                    curr = curr.next
                    
                counter = 0
                
        while len(temp) > 0:
            curr.next = ListNode(temp.popleft())
            curr = curr.next
                
        return res.next
        
        
        
        
        
### LeetCode Version: in-place. Using pointer realising reverse. ###

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

class Solution:
    
    def reverseLinkedList(self, head, k):
        
        # Reverse k nodes of the given linked list.
        # This function assumes that the list contains 
        # atleast k nodes.
        new_head, ptr = None, head
        while k:
            
            # Keep track of the next node to process in the
            # original list
            next_node = ptr.next
            
            # Insert the node pointed to by "ptr"
            # at the beginning of the reversed list
            ptr.next = new_head
            new_head = ptr
            
            # Move on to the next node
            ptr = next_node
            
            # Decrement the count of nodes to be reversed by 1
            k -= 1
        
        # Return the head of the reversed list
        return new_head
                
    
    def reverseKGroup(self, head, k: int):
        
        ptr = head
        ktail = None
        
        # Head of the final, moified linked list
        new_head = None
        
        # Keep going until there are nodes in the list
        while ptr:
            count = 0
            
            # Start counting nodes from the head
            ptr = head
            
            # Find the head of the next k nodes
            while count < k and ptr:
                ptr = ptr.next
                count += 1

            # If we counted k nodes, reverse them        
            if count == k:
                
                # Reverse k nodes and get the new head
                revHead = self.reverseLinkedList(head, k)
                
                # new_head is the head of the final linked list
                if not new_head:
                    new_head = revHead
                
                # ktail is the tail of the previous block of 
                # reversed k nodes
                if ktail:
                    ktail.next = revHead
                    
                ktail = head 
                head = ptr
        
        # attach the final, possibly un-reversed portion
        if ktail:
            ktail.next = head
        
        return new_head if new_head else head
exp = ListNode(1)
exp.next = ListNode(2)
exp.next.next = ListNode(3)
exp.next.next.next = ListNode(4)
exp.next.next.next.next = ListNode(5)
Solution().reverseKGroup(exp, 4)
