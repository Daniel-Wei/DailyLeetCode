# 22. Generate Parentheses

*** Given n pairs of parentheses,
    write a function to generate all combinations of well-formed parentheses.

# Example 1:

** Input: n = 3
** Output: ["((()))","(()())","(())()","()(())","()()()"]


*** My First Naive BackTracking Solution ***
class Solution:
    def generateParenthesis(self, n: int) -> List[str]:
        def backtrack(n, sum_left, sum_right, path, res):
            if len(path) == n*2:
                res += [path]
                return None
            if sum_left > sum_right:
                if sum_left == n:
                    possible = [")"]
                else:
                    possible = ["(", ")"]
            else:
                possible = ["("]
            
            for ele in possible:
                path += ele
                if ele == "(":
                    sum_left += 1
                else:
                    sum_right += 1
                backtrack(n, sum_left, sum_right, path, res)
                if path[-1] == "(":
                    sum_left -= 1
                else:
                    sum_right -= 1
                path = path[:len(path) - 1]
        res = []
        backtrack(n, 0, 0, "", res)
        return res
