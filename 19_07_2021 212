# 212. Word Search II

class Solution:
    def findWords(self, board: List[List[str]], words: List[str]) -> List[str]:
            
        def backtrack(pos, word, index, res):
            if index == len(word):
                res += [word]
                return True
            neighbours = []
            if pos[0] == 0:
                if pos[1] == 0:
                    neighbours += [[0, 1], [1, 0]]
                elif pos[1] == len(board) - 1:
                    neighbours += [[0, pos[1] - 1], [1, pos[1]]]
                else:
                    neighbours += [[0, pos[1] - 1], [0, pos[1] + 1], [1, pos[1]]]
            elif pos[0] == len(board) - 1:
                if pos[1] == 0:
                    neighbours += [[pos[0] - 1, 0], [pos[0], 1]]
                elif pos[1] == len(board) - 1:
                    neighbours += [[pos[0], pos[1] - 1], [pos[0] - 1, pos[1]]]
                else:
                    neighbours += [[pos[0], pos[1] - 1], [pos[0], pos[1] + 1], [pos[0] - 1, pos[1]]]
        
            else:
                if pos[1] == 0:
                    neighbours += [[pos[0] + 1, 0], [pos[0] - 1, 0], [pos[0], 1]]
                elif pos[1] == len(board) - 1:
                    neighbours += [[pos[0] - 1, pos[1]], [pos[0], pos[1] - 1], [pos[0] + 1, pos[1]]]
                else:
                    neighbours += [[pos[0] - 1, pos[1]], [pos[0] + 1, pos[1]], [pos[0], pos[1] - 1], [pos[0], pos[1] + 1]]
            
            for i in range(len(neighbours)):
                if board[neighbours[i][0]][neighbours[i][1]] == word[index]:
                    backtrack([neighbours[i][0], neighbours[i][1]], word, index + 1, res) 
            
            return None
        
        res = []
        found = False
        for word in words:
            for i in range(len(board)):
                for k in range(len(board[i])):
                    # Get rid of the edge case when len(board) == 1
                    if board[i][k] == word[0] and len(board) >= len(word):
                        if backtrack([i, k], word, 1, res):
                            found = True
                            break
                if found:
                    found = False
                    break
                
        return res
            
        
