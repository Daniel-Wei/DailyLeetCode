# 17. Letter Combinations of a Phone Number

*** Given a string containing digits from 2-9 inclusive, 
    return all possible letter combinations that the number could represent. 
    Return the answer in any order.
    
    
# Example 1:

*** Input: digits = "23"
*** Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]

*** My Brute Force Solution ***
class Solution:
    def letterCombinations(self, digits: str) -> List[str]:
        mapping = ["abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"]
        res = []
        for ele in digits:
            if not len(res):
                res += [char for char in mapping[int(ele)-2]]
            else:
                temp = []
                for i in range(len(res)):
                    for char in mapping[int(ele) - 2]:
                        temp += [res[i] + char]
                res = temp
        return res
     
     
     
*** My BackTracking Solution ***

class Solution:
    def letterCombinations(self, digits: str) -> List[str]:
        mapping = ["abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"]
        if not len(digits):
            return []
        def backtrack(index, path, res):
            if len(path) == len(digits):
                res += ["".join(path)]
                return None
            
            possible_letters = mapping[int(digits[index]) - 2]
            for char in possible_letters:
                path += [char]
                backtrack(index + 1, path, res)
                path.pop()
        res = []
        backtrack(0, [], res)
        return res
        
        
        
        
*** Official BackTracking Solution ***

class Solution:
    def letterCombinations(self, digits: str) -> List[str]:
        # If the input is empty, immediately return an empty answer array
        if len(digits) == 0: 
            return []
        
        # Map all the digits to their corresponding letters
        letters = {"2": "abc", "3": "def", "4": "ghi", "5": "jkl", 
                   "6": "mno", "7": "pqrs", "8": "tuv", "9": "wxyz"}
        
        def backtrack(index, path):
            # If the path is the same length as digits, we have a complete combination
            if len(path) == len(digits):
                combinations.append("".join(path))
                return # Backtrack
            
            # Get the letters that the current digit maps to, and loop through them
            possible_letters = letters[digits[index]]
            for letter in possible_letters:
                # Add the letter to our current path
                path.append(letter)
                # Move on to the next digit
                backtrack(index + 1, path)
                # Backtrack by removing the letter before moving onto the next
                path.pop()

        # Initiate backtracking with an empty path and starting index of 0
        combinations = []
        backtrack(0, [])
        return combinations
