# 53. Maximum Subarray

# Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

# Example:
# Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
# Output: 6
# Explanation: [4,-1,2,1] has the largest sum = 6.

### My Own Version --- DP ###

class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        dp = [nums[0]]
        last_index = 0
        for i in range(1, len(nums)):
            if last_index == i - 1:
                curr = max(nums[i], dp[i-1], nums[i] + dp[i-1])
                if curr != dp[i-1]:
                     last_index = i
            else:
                curr = max(nums[i], dp[i-1], sum(nums[last_index + 1 : i+1]) + dp[i-1])
                prev_index = last_index
                if curr != dp[i-1]:
                     last_index = i
                for k in range(prev_index + 2, i):
                    curr_k = sum(nums[k : i+1])
                    if curr_k > curr:
                        curr = curr_k
                        last_index = i
            dp += [curr]
                
                
        return dp[-1]
        

### Kadane's Algirithm --- DP for max sum at ending index ###


class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        dp = [nums[0]]
        for i in range(1, len(nums)):
            dp += [max(dp[i-1] + nums[i], nums[i])]
        return max(dp)
